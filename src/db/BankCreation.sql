SET AUTO OFF;
DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('ACCOUNT');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE ACCOUNT CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE ACCOUNT (
  account_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY START WITH 1111111 PRIMARY KEY,
  account_type NUMBER,
  balance NUMBER(12,5),
  overdraft_protection NUMBER(6),
  active NUMBER(1)
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('ACCOUNT_OWNERSHIP_JT');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE ACCOUNT_OWNERSHIP_JT CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE ACCOUNT_OWNERSHIP_JT (
  ownership_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  owner NUMBER,
  account NUMBER,
  date_added DATE
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('ACCOUNT_REQUEST');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE ACCOUNT_REQUEST CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE ACCOUNT_REQUEST (
  acc_request_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  account_type NUMBER,
  date_of_request DATE
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('ACCOUNT_REQUEST_USERS');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE ACCOUNT_REQUEST_USERS CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE ACCOUNT_REQUEST_USERS (
  acc_request_user NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  person NUMBER,
  acc_request NUMBER
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('ACCOUNT_TRANSACTION');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE ACCOUNT_TRANSACTION CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE ACCOUNT_TRANSACTION (
  transaction_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  amount NUMBER(12,2),
  account NUMBER,
  status NUMBER,
  transaction_type NUMBER,
  notes VARCHAR(500),
  related_transaction NUMBER
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('ACCOUNT_TRANSACTION_STATUS');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE ACCOUNT_TRANSACTION_STATUS CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE ACCOUNT_TRANSACTION_STATUS (
  trans_status_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  label VARCHAR(100)
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('ACCOUNT_TRANSACTION_TYPE');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE ACCOUNT_TRANSACTION_TYPE CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE ACCOUNT_TRANSACTION_TYPE (
  trans_type_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  label VARCHAR(100)
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('ACCOUNT_TYPE');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE ACCOUNT_TYPE CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE ACCOUNT_TYPE (
  account_type_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  label VARCHAR(100),
  min_balance NUMBER(7),
  Interest NUMBER(6,5)
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('ADDRESS');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE ADDRESS CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE ADDRESS (
  address_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  address VARCHAR(100)
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('ASSOCIATED_PEOPLE_JT');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE ASSOCIATED_PEOPLE_JT CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE ASSOCIATED_PEOPLE_JT (
  first_person NUMBER,
  second_person NUMBER
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('CITY');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE CITY CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE CITY (
  city_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  city VARCHAR(200),
  state VARCHAR(2),
  zip NUMBER(5)
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('EMAIL');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE EMAIL CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE EMAIL (
  email_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  email VARCHAR(100),
  person NUMBER
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('PERSON');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE PERSON CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE PERSON (
  person_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  first_name VARCHAR(100),
  last_name VARCHAR(100),
  social_sec_num VARCHAR(9),
  standing NUMBER,
  password VARCHAR2(1000),
  city NUMBER,
  address NUMBER,
  username VARCHAR(100) UNIQUE,
  active NUMBER(1)
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('PERSON_STANDING');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE PERSON_STANDING CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE PERSON_STANDING (
  standing_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  label VARCHAR(100)
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('PERSON_STANDING_LABEL');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE PERSON_STANDING_LABEL CASCADE CONSTRAINTS';
   END IF;
END;
/

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('PERMISSION_RANK_JT');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE PERMISSION_RANK_JT CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE PERMISSION_RANK_JT (
  person NUMBER,
  permission_rank_label_id NUMBER
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('PERMISSION_RANK_LABEL');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE PERMISSION_RANK_LABEL CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE PERMISSION_RANK_LABEL (
  permission_rank_label_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  label VARCHAR(100)
);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM user_tables WHERE table_name = upper('PHONE_NUMBER');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP TABLE PHONE_NUMBER CASCADE CONSTRAINTS';
   END IF;
END;
/

CREATE TABLE PHONE_NUMBER (
  phone_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  phone_number VARCHAR(20),
  person NUMBER
);

ALTER TABLE ACCOUNT 
  ADD CONSTRAINT ac_account_type
    FOREIGN KEY (ACCOUNT_TYPE)
    REFERENCES ACCOUNT_TYPE (account_type_id)
    ON DELETE SET NULL
;
ALTER TABLE ACCOUNT
  ADD CONSTRAINT ac_check_bool
    CHECK (active <= 1 AND active >= 0)
;
ALTER TABLE ACCOUNT_OWNERSHIP_JT 
  ADD CONSTRAINT ao_owner
    FOREIGN KEY (owner)
    REFERENCES PERSON (person_id)
    ON DELETE SET NULL
;
ALTER TABLE ACCOUNT_OWNERSHIP_JT 
  ADD CONSTRAINT ao_account
    FOREIGN KEY (account)
    REFERENCES ACCOUNT (account_id)
    ON DELETE SET NULL
;
ALTER TABLE ACCOUNT_REQUEST 
  ADD CONSTRAINT ar_account_type
    FOREIGN KEY (ACCOUNT_TYPE)
    REFERENCES ACCOUNT_TYPE (account_type_id)
    ON DELETE SET NULL
;
ALTER TABLE ACCOUNT_REQUEST_USERS
  ADD CONSTRAINT ar_person
    FOREIGN KEY (person)
    REFERENCES PERSON (person_id)
    ON DELETE SET NULL
;
ALTER TABLE ACCOUNT_REQUEST_USERS
  ADD CONSTRAINT ar_account_request
    FOREIGN KEY (acc_request)
    REFERENCES ACCOUNT_REQUEST (acc_request_id)
    ON DELETE SET NULL
;
ALTER TABLE ACCOUNT_TRANSACTION
  ADD CONSTRAINT at_account
    FOREIGN KEY (account)
    REFERENCES ACCOUNT (account_id)
    ON DELETE SET NULL
;
ALTER TABLE ACCOUNT_TRANSACTION
  ADD CONSTRAINT at_status
    FOREIGN KEY (status)
    REFERENCES ACCOUNT_TRANSACTION_STATUS (trans_status_id)
    ON DELETE SET NULL
;
ALTER TABLE ACCOUNT_TRANSACTION
  ADD CONSTRAINT at_type
    FOREIGN KEY (transaction_type)
    REFERENCES ACCOUNT_TRANSACTION_TYPE (trans_type_id)
    ON DELETE SET NULL
;
ALTER TABLE ACCOUNT_TRANSACTION
  ADD CONSTRAINT at_related
    FOREIGN KEY (related_transaction)
    REFERENCES ACCOUNT_TRANSACTION (transaction_id)
    ON DELETE SET NULL
;
ALTER TABLE ASSOCIATED_PEOPLE_JT
  ADD CONSTRAINT ap_first
    FOREIGN KEY (first_person)
    REFERENCES PERSON (person_id)
    ON DELETE SET NULL
;
ALTER TABLE ASSOCIATED_PEOPLE_JT
  ADD CONSTRAINT ap_second
    FOREIGN KEY (second_person)
    REFERENCES PERSON (person_id)
    ON DELETE SET NULL
;
ALTER TABLE EMAIL
  ADD CONSTRAINT em_person
    FOREIGN KEY (person)
    REFERENCES PERSON (person_id)
    ON DELETE SET NULL
;
ALTER TABLE PERSON
  ADD CONSTRAINT pe_standing
    FOREIGN KEY (standing)
    REFERENCES PERSON_STANDING (standing_id)
    ON DELETE SET NULL
;
ALTER TABLE PERSON
  ADD CONSTRAINT pe_city
    FOREIGN KEY (city)
    REFERENCES CITY (city_id)
    ON DELETE SET NULL
;
ALTER TABLE PERSON
  ADD CONSTRAINT pe_address
    FOREIGN KEY (address)
    REFERENCES ADDRESS (address_id)
    ON DELETE SET NULL
;
ALTER TABLE PERMISSION_RANK_JT
  ADD CONSTRAINT pr_person
    FOREIGN KEY (person)
    REFERENCES PERSON (person_id)
    ON DELETE SET NULL
;
ALTER TABLE PERMISSION_RANK_JT
  ADD CONSTRAINT pr_label
    FOREIGN KEY (permission_rank_label_id)
    REFERENCES PERMISSION_RANK_LABEL (permission_rank_label_id)
    ON DELETE SET NULL
;
ALTER TABLE PHONE_NUMBER
  ADD CONSTRAINT pn_person
    FOREIGN KEY (person)
    REFERENCES PERSON (person_id)
    ON DELETE SET NULL
;

INSERT INTO PERMISSION_RANK_LABEL (label) VALUES ('Customer');
INSERT INTO PERMISSION_RANK_LABEL (label) VALUES ('Employee');
INSERT INTO PERMISSION_RANK_LABEL (label) VALUES ('Admin');
INSERT INTO PERSON_STANDING (label) VALUES ('Black List -5');
INSERT INTO PERSON_STANDING (label) VALUES ('Delinquent -3');
INSERT INTO PERSON_STANDING (label) VALUES ('Disrespectful -2');
INSERT INTO PERSON_STANDING (label) VALUES ('Untrustworthy -1');
INSERT INTO PERSON_STANDING (label) VALUES ('Unknown 0');
INSERT INTO PERSON_STANDING (label) VALUES ('Trustworthy 1');
INSERT INTO PERSON_STANDING (label) VALUES ('Respected 2');
INSERT INTO PERSON_STANDING (label) VALUES ('Honored 3');
INSERT INTO ACCOUNT_TRANSACTION_TYPE (label) VALUES ('Deposit');
INSERT INTO ACCOUNT_TRANSACTION_TYPE (label) VALUES ('Transfer in');
INSERT INTO ACCOUNT_TRANSACTION_TYPE (label) VALUES ('Transfer out');
INSERT INTO ACCOUNT_TRANSACTION_TYPE (label) VALUES ('Withdraw');
INSERT INTO ACCOUNT_TRANSACTION_STATUS (label) VALUES ('Pending');
INSERT INTO ACCOUNT_TRANSACTION_STATUS (label) VALUES ('Disputed');
INSERT INTO ACCOUNT_TRANSACTION_STATUS (label) VALUES ('Approved');
INSERT INTO ACCOUNT_TRANSACTION_STATUS (label) VALUES ('Rejected');
INSERT INTO ACCOUNT_TYPE (label,min_balance,interest) VALUES ('Checking',0,0.0005);
INSERT INTO ACCOUNT_TYPE (label,min_balance,interest) VALUES ('Savings',300,0.0015);
INSERT INTO ACCOUNT_TYPE (label,min_balance,interest) VALUES ('High Yield Savings',50000,0.0105);
INSERT INTO ACCOUNT_TYPE (label,min_balance,interest) VALUES ('Credit',-5000,0.0);
INSERT INTO ACCOUNT (account_type,balance,overdraft_protection,active) VALUES (1,0,500,1);
INSERT INTO ACCOUNT (account_type,balance,overdraft_protection,active) VALUES (2,0,1000,1);

DECLARE
   c int;
BEGIN
   SELECT count(*) INTO c FROM dba_users WHERE username  = upper('bank_connection');
   IF c = 1 then
      EXECUTE IMMEDIATE 'DROP USER bank_connection CASCADE';
   END IF;
END;
/


--
--Procedures
--
CREATE OR REPLACE PROCEDURE insert_into_person(
  emp_id OUT NUMBER, 
  emp_first IN VARCHAR2,
  emp_last IN VARCHAR2,
  emp_email VARCHAR2,
  emp_salary NUMBER,
  emp_title VARCHAR2
)
IS
BEGIN
  INSERT INTO EMPLOYEES(first_name, last_name, email, salary, title) 
    VALUES (emp_first, emp_last, emp_email, emp_salary, emp_title)
    RETURNING employee_id 
      INTO emp_id;
END;
/

CREATE OR REPLACE PROCEDURE insert_into_account(
  account_id OUT NUMBER, 
  account_owner IN NUMBER
)
IS
BEGIN
  INSERT INTO tmp_account(owner) 
    VALUES (account_owner)
    RETURNING id 
      INTO account_id;
END;
/

CREATE OR REPLACE PROCEDURE transfer_funds(
  source_id IN NUMBER, 
  target_id IN NUMBER, 
  amount IN NUMBER
)
IS
  source_balance NUMBER;
  target_balance NUMBER;
BEGIN
  SELECT (balance - amount) INTO source_balance FROM tmp_account
    WHERE tmp_account.id = source_id;
--  source_balance := source_balance - amount;
  SELECT (balance + amount) INTO target_balance FROM tmp_account
    WHERE tmp_account.id = target_id;
--  target_balance := target_balance + amount;
  UPDATE tmp_account SET balance = source_balance WHERE tmp_account.id = source_id;
  UPDATE tmp_account SET balance = target_balance WHERE tmp_account.id = target_id;
  COMMIT;
END;
/
CREATE USER bank_connection IDENTIFIED BY a2v5iIl9vTqbTrziqB581Bt5iB0iqz;
GRANT CREATE SESSION TO bank_connection;
GRANT EXECUTE ON admin.insert_into_person TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.account TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.account_employees_jt TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.account_ownership_jt TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.account_request TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.account_request_users TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.account_transaction TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.account_transaction_status TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.account_transaction_type TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.account_type TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.address TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.associated_people_jt TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.city TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.email TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.permission_rank_jt TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.permission_rank_label TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.person TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.person_standing TO bank_connection;
GRANT INSERT, SELECT, UPDATE, DELETE ON admin.phone_number TO bank_connection;
COMMIT;
SELECT * FROM ACCOUNT;
--SELECT * FROM ACCOUNT WHERE account_id = (SELECT MAX(account_id) FROM ACCOUNT);
--SELECT MAX(account_id) FROM ACCOUNT;
--SELECT * FROM PERMISSION_RANK_LABEL;
--SELECT * FROM PERSON_STANDING;
--SELECT * FROM ACCOUNT_TYPE;